{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Msftedit 5.41.21.2512;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22\par
What is Metaprogramming in JavaScript? In English, please.\par
TAPAS ADHIKARY\par
TAPAS ADHIKARY\par
What is Metaprogramming in JavaScript? In English, please.\par
JavaScript has many useful features that most developers know about. At the same time, there are some hidden gems that can solve really challenging problems if you're aware of them.\par
\par
Metaprogramming in JavaScript is one such concept that many of us may not be familiar with. In this article, we will learn about Metaprogramming and how it's useful to us.\par
\par
With ES6 (ECMAScript 2015), we have support for the Reflect and Proxy objects that allow us to do Metaprogramming with ease. In this article, we'll learn how to use them with examples.\par
\par
What is Metaprogramming?\par
Metaprogramming is nothing less than the magic in programming! How about writing a program that reads, modifies, analyzes, and even generates a program? Doesn't that sound wizardly and powerful?\par
\par
elwIjsjlSeV2c9VBF07ZDHmurJ5_NdeIJ0bDOSNpNai644OhE90gDbGlyOnL4xea5D7S6s9M17V3w4h3zgpr8Q9sn3Ke8BuzPJySs4JI6J0v0jvgX6eSdalnFdULzTWh85IjQMFGjYX-ymmAOA\par
Metaprogramming is magic\par
Wikipedia describes Metaprogramming like this:\par
\par
Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data. This means that a program can be designed to read, generate, analyze, or transform other programs, and even modify itself while running.\par
Simply put, Metaprogramming involves writing code that can\par
\par
Generate code\par
Manipulate language constructs at the run time. This phenomenon is known as Reflective Metaprogramming or Reflection.\par
What is Reflection in Metaprogramming?\par
Reflection is a branch of Metaprogramming. Reflection has three sub-branches:\par
\par
Introspection: Code is able to inspect itself. It is used to access the internal properties such that we can get the low-level information of our code.\par
Self-Modification: As the name suggests, code is able to modify itself.\par
Intercession: The literal meaning of intercession is, acting on behalf of somebody else. In metaprogramming, the intercession does exactly the same using the concepts like, wrapping, trapping, intercepting.\par
ES6 gives us the Reflect object (aka the Reflect API) to achieve Introspection. The Proxy object of ES6 helps us with Intercession. We won't talk too much about  Self-Modification as we want to stay away from it as much as possible.\par
\par
Hang on a second! Just to be clear, Metaprogramming wasn't introduced in ES6. Rather, it has been available in the language from its inception. ES6 just made it a lot easier to use.\par
\par
Pre-ES6 era of Metaprogramming\par
Do you remember eval? Let's have a look at how it was used:\par
\par
const blog = \{\par
    name: 'freeCodeCamp'\par
\}\par
console.log('Before eval:', blog);\par
\par
const key = 'author';\par
const value = 'Tapas';\par
testEval = () => eval(`blog.$\{key\} = '$\{value\}'`);\par
\par
// Call the function\par
testEval();\par
\par
console.log('After eval magic:', blog);\par
As you may notice, eval helped with additional code generation. In this case, the object blog has been modified with an additional property at execution time.\par
\par
Before eval: \{name: freeCodeCamp\}\par
After eval magic: \{name: "freeCodeCamp", author: "Tapas"\}\par
Introspection\par
Before the inclusion of the Reflect object in ES6, we could still do introspection. Here is an example of reading the structure of the program:\par
\par
var users = \{\par
    'Tom': 32,\par
    'Bill': 50,\par
    'Sam': 65\par
\};\par
\par
Object.keys(users).forEach(name => \{\par
    const age = users[name];\par
    console.log(`User $\{name\} is $\{age\} years old!`);\par
\});\par
Here we are reading the users object structure and logging the key-value in a sentence.\par
\par
User Tom is 32 years old!\par
User Bill is 50 years old!\par
User Sam is 65 years old!\par
Self Modification\par
Let's take a blog object that has a method to modify itself:\par
\par
var blog = \{\par
    name: 'freeCodeCamp',\par
    modifySelf: function(key, value) \{blog[key] = value\}\par
\}\par
The blog object can modify itself by doing this:\par
\par
blog.modifySelf('author', 'Tapas');\par
Intercession\par
Intercession in metaprogramming means acting or changing things on behalf of somebody or something else. The pre-ES6 Object.defineProperty() method can change an object's semantics:\par
\par
var sun = \{\};\par
\par
Object.defineProperty(sun, 'rises', \{\par
    value: true,\par
    configurable: false,\par
    writable: false,\par
    enumerable: false\par
\});\par
\par
console.log('sun rises', sun.rises);\par
sun.rises = false;\par
console.log('sun rises', sun.rises);\par
Output:\par
\par
sun rises true\par
sun rises true\par
As you can see, the sun object was created as a normal object. Then the semantics were been changed so that it is not writable.\par
\par
Now let's jump into understanding the Reflect and Proxy objects with their respective usages.\par
\par
The Reflect API\par
In ES6, Reflect is a new Global Object (like Math) that provides a number of utility functions. Some of these functions may do exactly the same thing as the methods from Object or Function.  \par
\par
All these functions are Introspection functions where you could query some internal details about the program at the run time.\par
\par
Here is the list of available methods from the Reflect object.\par
\par
// Reflect object methods\par
\par
Reflect.apply()\par
Reflect.construct()\par
Reflect.get()\par
Reflect.has()\par
Reflect.ownKeys()\par
Reflect.set()\par
Reflect.setPrototypeOf()\par
Reflect.defineProperty()\par
Reflect.deleteProperty()\par
Reflect.getOwnPropertyDescriptor()\par
Reflect.getPrototypeOf()\par
Reflect.isExtensible()\par
But wait, here's a question: Why do we need a new API object when these could just exist already or could be added to Object or Function?\par
\par
Confused? Let's try to figure this out.\par
\par
All in one namespace\par
JavaScript already had support for object reflection. But these APIs were not organized under one namespace. Since ES6 they're now under Reflect.\par
\par
All the methods of the Reflect object are static in nature. It means, you do not have to instantiate the Reflect object using the new keyword.\par
\par
Simple to use\par
The introspection methods of Object throw an exception when they fail to complete the operation. This is an added burden to the consumer (programmer) to handle that exception in the code.\par
\par
You may prefer to handle it as a boolean(true | false) instead of using exception handling. The Reflect object helps you do that.\par
\par
Here's an example with Object.defineProperty:\par
\par
 try \{\par
        Object.defineProperty(obj, name, desc);\par
    \} catch (e) \{\par
        // Handle the exception\par
    \}\par
And with the Reflect API:\par
\par
if (Reflect.defineProperty(obj, name, desc)) \{\par
  // success\par
\} else \{\par
 // failure (and far better)\par
\}\par
The impression of the First-Class function\par
We can find the existence of a property for an object as (prop in obj). If we need to use it multiple times in our code, we have to create a function by wrapping this code.\par
\par
In ES6, the Reflect API solves this problem by introducing a first-class function, Reflect.has(obj, prop).\par
\par
Let's look at another example: Delete an object property.\par
\par
const obj = \{ bar: true, baz: false\};\par
\par
// We define this function\par
function deleteProperty(object, key) \{\par
    delete object[key];\par
\}\par
deleteProperty(obj, 'bar');\par
With the Reflect API:\par
\par
// With Reflect API\par
Reflect.deleteProperty(obj, 'bar');\par
A more reliable way of using the apply() method\par
The apply() method in ES5 helps calling a function with the context of a this value. We can also pass the arguments as an array.\par
\par
Function.prototype.apply.call(func, obj, arr);\par
// or\par
func.apply(obj, arr);\par
This is less reliable because func could be an object that would have defined its own apply method.\par
\par
In ES6 we have a more reliable and elegant way of solving this:\par
\par
Reflect.apply(func, obj, arr);\par
In this case, we will get a TypeError if func is not callable.\par
\par
Helping other kinds of reflection\par
We will see what this means in a bit when we learn about the Proxy object. The Reflect API methods can be used with Proxy in many use cases.\par
\par
The Proxy Object\par
ES6's Proxy object helps in intercession.\par
\par
As the name suggests, a proxy object helps in acting on the behalf of something. It does this by virtualizing another object. Object virtualization provides custom behaviors to that object.\par
\par
For example, using the proxy object we can virtualize object property lookup, function invocation, and so on. We will see some of these in detail more detail below.\par
\par
Here are a few useful terms you need to remember and use:\par
\par
The target: An object that proxy provides custom behaviors to.\par
The handler: It is an object that contains traps.\par
The trap: Trap is a method that provide access to the target object's properties. This is achieved using the Reflect API methods. Each of the trap methods are mapped with the methods from the Reflect API.\par
You can imagine it something like this:\par
\par
flow-1\par
A handler with a trap function should be defined. Then we need to create a Proxy object using the handler and the target object. The Proxy object will have all the changes with the custom behaviors applied.\par
\par
It is perfectly fine if you don't quite understand yet from the description above. We will get a grasp of it through code and examples in a minute.\par
\par
The syntax to create a Proxy object is as follows:\par
\par
let proxy = new Proxy(target, handler);\par
There are many proxy traps (handler functions) available to access and customize a target object. Here is the list of them.\par
\par
handler.apply()\par
handler.construct()\par
handler.get()\par
handler.has()\par
handler.ownKeys()\par
handler.set()\par
handler.setPrototypeOf()\par
handler.getPrototypeOf()\par
handler.defineProperty()\par
handler.deleteProperty()\par
handler.getOwnPropertyDescriptor()\par
handler.preventExtensions()\par
handler.isExtensible()\par
Note that each of the traps has a mapping with the Reflect object's methods. This means that you can use Reflect and Proxy together in many use cases.\par
\par
How to get unavailable object property values\par
Let's look at an example of an employee object and try to print some of its properties:\par
\par
const employee = \{\par
    firstName: 'Tapas',\par
    lastName: 'Adhikary'\par
\};\par
\par
console.log(employee.firstName);\par
console.log(employee.lastName);\par
console.log(employee.org);\par
console.log(employee.fullName);\par
The expected output is the following:\par
\par
Tapas\par
Adhikary\par
undefined\par
undefined\par
Now let's use the Proxy object to add some custom behavior to the employee object.\par
\par
Step 1: Create a Handler that uses a get trap\par
We will use a trap called get which lets us get a property value. Here is our handler:\par
\par
let handler = \{\par
    get: function(target, fieldName) \{        \par
\par
        if(fieldName === 'fullName' ) \{\par
            return `$\{target.firstName\} $\{target.lastName\}`;\par
        \}\par
\par
        return fieldName in target ?\par
            target[fieldName] :\par
                `No such property as, '$\{fieldName\}'!`\par
\par
    \}\par
\};\par
The above handler helps to create the value for the fullName property. It also adds a better error message when an object property is missing.\par
\par
Step 2: Create a Proxy Object\par
As we have the target employee object and the handler, we will be able to create a Proxy object like this:\par
\par
let proxy = new Proxy(employee, handler);\par
Step 3: Access the properties on the Proxy object\par
Now we can access the employee object properties using the proxy object, like this:\par
\par
console.log(proxy.firstName);\par
console.log(proxy.lastName);\par
console.log(proxy.org);\par
console.log(proxy.fullName);\par
The output will be:\par
\par
Tapas\par
Adhikary\par
No such property as, 'org'!\par
Tapas Adhikary\par
Notice how we have magically changed things for the employee object!\par
\par
Proxy for Validation of Values\par
Let's create a proxy object to validate an integer value.\par
\par
Step 1: Create a handler that uses a set trap\par
The handler looks like this:\par
\par
const validator = \{\par
    set: function(obj, prop, value) \{\par
        if (prop === 'age') \{\par
            if(!Number.isInteger(value)) \{\par
                throw new TypeError('Age is always an Integer, Please Correct it!');\par
            \}\par
            if(value < 0) \{\par
                throw new TypeError('This is insane, a negative age?');\par
            \}\par
        \}\par
    \}\par
\};\par
Step 2: Create a Proxy Object\par
Create a proxy object like this:\par
\par
let proxy = new Proxy(employee, validator);\par
Step 3: Assign a non-integer value to a property, say, age\par
Try doing this:\par
\par
proxy.age = 'I am testing a blunder'; // string value\par
The output will be like this:\par
\par
TypeError: Age is always an Integer, Please Correct it!\par
    at Object.set (E:\\Projects\\KOSS\\metaprogramming\\js-mtprog\\proxy\\userSetProxy.js:28:23)\par
    at Object.<anonymous> (E:\\Projects\\KOSS\\metaprogramming\\js-mtprog\\proxy\\userSetProxy.js:40:7)\par
    at Module._compile (module.js:652:30)\par
    at Object.Module._extensions..js (module.js:663:10)\par
    at Module.load (module.js:565:32)\par
    at tryModuleLoad (module.js:505:12)\par
    at Function.Module._load (module.js:497:3)\par
    at Function.Module.runMain (module.js:693:10)\par
    at startup (bootstrap_node.js:188:16)\par
    at bootstrap_node.js:609:3\par
Similarly, try doing this:\par
\par
p.age = -1; // will result in error\par
How to use Proxy and Reflect together\par
Here is an example of a handler where we use methods from the Reflect API:\par
\par
const employee = \{\par
    firstName: 'Tapas',\par
    lastName: 'Adhikary'\par
\};\par
\par
let logHandler = \{\par
    get: function(target, fieldName) \{        \par
        console.log("Log: ", target[fieldName]);\par
        \par
        // Use the get method of the Reflect object\par
        return Reflect.get(target, fieldName);\par
    \}\par
\};\par
\par
let func = () => \{\par
    let p = new Proxy(employee, logHandler);\par
    p.firstName;\par
    p.lastName;\par
\};\par
\par
func();\par
A few more Proxy use cases\par
There are several other use-cases where this concept can be used.\par
\par
To protect the ID field of an object from deletion (trap: deleteProperty)\par
To trace Property Accesses (trap: get, set)\par
For Data Binding (trap: set)\par
With revocable references\par
To manipulate the in operator behavior\par
... and many more.\par
\par
Metaprogramming Pitfalls\par
While the concept of Metaprogramming gives us lots of power, the magic of it can go the wrong way sometimes.\par
\par
black_magic\par
Be careful of the other side of the magic\par
Be careful of:\par
\par
Too much magic! Make sure you understand it before you apply it.\par
Possible performance hits when you're making the impossible possible\par
Could be seen as counter-debugging.\par
In Summary\par
To summarize,\par
\par
Reflect and Proxy are great inclusions in JavaScript to help with Metaprogramming.\par
Lots of complex situations can be handled with their help.\par
Be aware of the downsides as well.\par
ES6 Symbols also can be used with your existing classes and objects to change their behavior.\par
I hope you found this article insightful. All the source code used in this article can be found in my GitHub repository.\par
\par
Please share the article so others can read it as well. You can @ me on Twitter (@tapasadhikary) with comments, or feel free to follow me.\par
\par
ADVERTISEMENT\par
ADVERTISEMENT\par
ADVERTISEMENT\par
ADVERTISEMENT\par
ADVERTISEMENT\par
\par
ADVERTISEMENT\par
\par
ADVERTISEMENT\par
\par
ADVERTISEMENT\par
ADVERTISEMENT\par
ADVERTISEMENT\par
ADVERTISEMENT\par
TAPAS ADHIKARY\par
TAPAS ADHIKARY\par
Writer . YouTuber . Creator . Mentor\par
\par
If you read this far, tweet to the author to show them you care. Tweet a thanks\par
\par
Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started\par
\par
ADVERTISEMENT\par
freeCodeCamp is a donor-supported tax-exempt 501(c)(3) nonprofit organization (United States Federal Tax Identification Number: 82-0779546)\par
\par
Our mission: to help people learn to code for free. We accomplish this by creating thousands of videos, articles, and interactive coding lessons - all freely available to the public. We also have thousands of freeCodeCamp study groups around the world.\par
\par
Donations to freeCodeCamp go toward our education initiatives, and help pay for servers, services, and staff.\par
\par
You can make a tax-deductible donation here.\par
\par
Trending Guides\par
Learn JavaScript\par
Linux ln Example\par
JS document.ready()\par
Delete a Row in SQL\par
Python Round to Int\par
What is msmpeng.exe?\par
Queue Data Structure\par
Learn Web Development\par
Install Node on Windows\par
Remove Char from String\par
Rust Lang\par
Python Sets\par
C++ Strings\par
Python map()\par
Python .pop()\par
Python arrays\par
npm Uninstall\par
Insertion Sort\par
Python If-Else\par
All Caps in CSS\par
Open Task Manager on Mac\par
parseInt() in JavaScript\par
Print statement in Python\par
Remove Directory in Linux\par
Python str.lower() Example\par
Second Monitor Not Detected\par
How to Declare Strings in C\par
How to Use .len() in Python\par
Python Convert String to Int\par
How to create a free website\par
About\par
Alumni Network\par
Open Source\par
Shop\par
Support\par
Sponsors\par
Academic Honesty\par
Code of Conduct\par
Privacy Policy\par
Terms of Service\par
Copyright Policy\par
}
 